


 from copy import deepcopy
import random
def make_choice(x,y,field):
    width = len(field)
    height = len(field[0])
    actions = ["go_up","go_down",
               "go_left","go_right"]




#стреляльная часть

   for i in range(0, x):
        if field[i][y] == -1:
            break 
        if field[i][y] not in [0,1,-1] and field[x][y]['life'] > field[i][y]['life']:
            return "fire_left"


    for i in range(x+1, width):
        if field[i][y] == -1:
            break
        if field[i][y] not in [0,1,-1] and field[x][y]['life'] > field[i][y]['life']:
            return "fire_right"


    for i in range(0, y):
        if field[x][i] == -1:
            break
        if field[x][i] not in [0,1,-1] and field[x][y]['life'] > field[i][y]['life']:
            return "fire_up"
           

    for i in range(y+1, height):
        if field[x][i] == -1:
            break 
        if field[x][i] not in [0,1,-1] and field[x][y]['life'] > field[i][y]['life']:
            return "fire_down"
#конец стреляльной части
    
#умный деньгосбор
    mapOfCoins = field 

    startX = x
    startY = y

    width = len(mapOfCoins)
    height = len(mapOfCoins[0])

    visitedMap = deepcopy(mapOfCoins)
    path = []

    points = [(startX, startY, 0, path)]

    while len(points) != 0:
        # ищем самую близкую точку из доступных
        points = sorted(points, key=lambda x: x[2])
        x, y, S, path = points[0]
        del points[0]

        # если точка за пределами поля
        if x < 0 or y < 0 or x >= width or y >= height:
            continue

        # если мы уже были в точке
        if visitedMap[x][y] == -1:
            continue
        if mapOfCoins[x][y] not in [1, -1, 0] and (x,y)!=(startX, startY):
            continue

# если нашли монетку
        if mapOfCoins[x][y] == 1:
            return path[0]  
        
        # помечаем клетку, как посещенную
        visitedMap[x][y] = -1
        # добавляем соседей в очередь
        newPath = deepcopy(path)
        newPath.append('go_right')
        points.append((x+1, y, S+1, newPath))

        newPath = deepcopy(path)
        newPath.append('go_down')
        points.append((x, y+1, S+1, newPath))

        newPath = deepcopy(path)
        newPath.append('go_left')
        points.append((x-1, y, S+1, newPath))

        newPath = deepcopy(path)
        newPath.append('go_up')
        points.append((x, y-1, S+1, newPath))

        
    return random.choice(actions)
